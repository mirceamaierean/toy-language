Id: 1
Execution stack:
RefType IntegerType v1; RefType IntegerType v2; RefType IntegerType v3; IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
RefType IntegerType v1
RefType IntegerType v2; RefType IntegerType v3; IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
RefType IntegerType v2; RefType IntegerType v3; IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
RefType IntegerType v2
RefType IntegerType v3; IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
RefType IntegerType v3; IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
RefType IntegerType v3
IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
IntegerType cnt
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

LatchTable:


Id: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

LatchTable:


Id: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3

LatchTable:


Id: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3

LatchTable:


Id: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:


Id: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:


Id: 1
Execution stack:
fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt))
fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt))
fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10))
print(readHeap(v1)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 2
Execution stack:
print(readHeap(v1)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 3
Execution stack:
writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt))
await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 2
Execution stack:
print(readHeap(v1))
countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 3
Execution stack:
writeHeap(v2, (readHeap(v2) * 10))
print(readHeap(v2)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 2
Execution stack:
countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 3
Execution stack:
print(readHeap(v2)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 4
Execution stack:
writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
await(cnt)
print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 2


Id: 2
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 2


Id: 3
Execution stack:
print(readHeap(v2))
countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 2


Id: 4
Execution stack:
writeHeap(v3, (readHeap(v3) * 10))
print(readHeap(v3)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 2


Id: 1
Execution stack:
await(cnt)
print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 2


Id: 3
Execution stack:
countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 2


Id: 4
Execution stack:
print(readHeap(v3)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 2


Id: 1
Execution stack:
await(cnt)
print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 1


Id: 3
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 1


Id: 4
Execution stack:
print(readHeap(v3))
countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 1


Id: 1
Execution stack:
await(cnt)
print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 1


Id: 4
Execution stack:
countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 1


Id: 1
Execution stack:
await(cnt)
print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


Id: 4
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


Id: 1
Execution stack:
print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


Id: 1
Execution stack:
print(100)
countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


Id: 1
Execution stack:
RefType IntegerType v1; RefType IntegerType v2; RefType IntegerType v3; IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
RefType IntegerType v1
RefType IntegerType v2; RefType IntegerType v3; IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
RefType IntegerType v2; RefType IntegerType v3; IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
RefType IntegerType v2
RefType IntegerType v3; IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
RefType IntegerType v3; IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
RefType IntegerType v3
IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
IntegerType cnt
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

LatchTable:


Id: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

LatchTable:


Id: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3

LatchTable:


Id: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3

LatchTable:


Id: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:


Id: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:


Id: 1
Execution stack:
fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt))
fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt))
fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10))
print(readHeap(v1)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 2
Execution stack:
print(readHeap(v1)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 3
Execution stack:
writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt))
await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 2
Execution stack:
print(readHeap(v1))
countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 3
Execution stack:
writeHeap(v2, (readHeap(v2) * 10))
print(readHeap(v2)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 2
Execution stack:
countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 3
Execution stack:
print(readHeap(v2)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 4
Execution stack:
writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
await(cnt)
print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 2


Id: 2
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 2


Id: 3
Execution stack:
print(readHeap(v2))
countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 2


Id: 4
Execution stack:
writeHeap(v3, (readHeap(v3) * 10))
print(readHeap(v3)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 2


Id: 1
Execution stack:
await(cnt)
print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 2


Id: 3
Execution stack:
countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 2


Id: 4
Execution stack:
print(readHeap(v3)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 2


Id: 1
Execution stack:
await(cnt)
print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 1


Id: 3
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 1


Id: 4
Execution stack:
print(readHeap(v3))
countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 1


Id: 1
Execution stack:
await(cnt)
print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 1


Id: 4
Execution stack:
countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 1


Id: 1
Execution stack:
await(cnt)
print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


Id: 4
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


Id: 1
Execution stack:
print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


Id: 1
Execution stack:
print(100)
countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


Id: 1
Execution stack:
countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
100
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


Id: 1
Execution stack:
countDown(cnt)
print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
100
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


Id: 1
Execution stack:
print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
100
1
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


Id: 1
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
100
1
100
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


Id: 1
Execution stack:
RefType IntegerType v1; RefType IntegerType v2; RefType IntegerType v3; IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
RefType IntegerType v1
RefType IntegerType v2; RefType IntegerType v3; IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
RefType IntegerType v2; RefType IntegerType v3; IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
RefType IntegerType v2
RefType IntegerType v3; IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
RefType IntegerType v3; IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
RefType IntegerType v3
IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
IntegerType cnt; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
IntegerType cnt
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

LatchTable:


Id: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

LatchTable:


Id: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(0,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

LatchTable:


Id: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3

LatchTable:


Id: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3

LatchTable:


Id: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:


Id: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:


Id: 1
Execution stack:
fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)); fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
fork(writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt))
fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)); fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
fork(writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt))
fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10))
print(readHeap(v1)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)); await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 2
Execution stack:
print(readHeap(v1)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 3
Execution stack:
writeHeap(v2, (readHeap(v2) * 10)); print(readHeap(v2)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
fork(writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt))
await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 2
Execution stack:
print(readHeap(v1))
countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 3
Execution stack:
writeHeap(v2, (readHeap(v2) * 10))
print(readHeap(v2)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 3
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
await(cnt); print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 2
Execution stack:
countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 3
Execution stack:
print(readHeap(v2)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 4
Execution stack:
writeHeap(v3, (readHeap(v3) * 10)); print(readHeap(v3)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 3


Id: 1
Execution stack:
await(cnt)
print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 2


Id: 2
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 2


Id: 3
Execution stack:
print(readHeap(v2))
countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 2


Id: 4
Execution stack:
writeHeap(v3, (readHeap(v3) * 10))
print(readHeap(v3)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 4

LatchTable:
1:-> 2


Id: 1
Execution stack:
await(cnt)
print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 2


Id: 3
Execution stack:
countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 2


Id: 4
Execution stack:
print(readHeap(v3)); countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 2


Id: 1
Execution stack:
await(cnt)
print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 1


Id: 3
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 1


Id: 4
Execution stack:
print(readHeap(v3))
countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 1


Id: 1
Execution stack:
await(cnt)
print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 1


Id: 4
Execution stack:
countDown(cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 1


Id: 1
Execution stack:
await(cnt)
print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


Id: 4
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


Id: 1
Execution stack:
print(100); countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


Id: 1
Execution stack:
print(100)
countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


Id: 1
Execution stack:
countDown(cnt); print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
100
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


Id: 1
Execution stack:
countDown(cnt)
print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
100
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


Id: 1
Execution stack:
print(100)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
100
1
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


Id: 1
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
v2(RefType IntegerType):-> Ref(2,IntegerType)
v3(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
2
30
3
40
4
100
1
100
Filetable:
Heap:
1(IntegerType):-> 20
2(IntegerType):-> 30
3(IntegerType):-> 40

LatchTable:
1:-> 0


