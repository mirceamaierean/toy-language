Id: 1
Execution stack:
IntegerType v; RefType IntegerType a; v = 10; new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
IntegerType v
RefType IntegerType a; v = 10; new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType IntegerType a; v = 10; new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
v(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType IntegerType a
v = 10; new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
v(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
v = 10; new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
v(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
v = 10
new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
v(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(a, 22)
fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:


Id: 1
Execution stack:
fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:
1(IntegerType):-> 22


Id: 1
Execution stack:
fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a)))
print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:
1(IntegerType):-> 22


Id: 1
Execution stack:
print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:
1(IntegerType):-> 22


Id: 2
Execution stack:
writeHeap(a, 30); v = 32; print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:
1(IntegerType):-> 22


Id: 1
Execution stack:
print(v)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:
1(IntegerType):-> 22


Id: 2
Execution stack:
writeHeap(a, 30)
v = 32; print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:
1(IntegerType):-> 22


Id: 1
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
10
Filetable:
Heap:
1(IntegerType):-> 30


Id: 2
Execution stack:
v = 32; print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
10
Filetable:
Heap:
1(IntegerType):-> 30


Id: 1
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
10
30
Filetable:
Heap:
1(IntegerType):-> 30


Id: 2
Execution stack:
v = 32
print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
10
30
Filetable:
Heap:
1(IntegerType):-> 30


Id: 2
Execution stack:
print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 32
Output:
10
30
Filetable:
Heap:
1(IntegerType):-> 30


Id: 2
Execution stack:
print(v)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 32
Output:
10
30
Filetable:
Heap:
1(IntegerType):-> 30


Id: 2
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 32
Output:
10
30
32
Filetable:
Heap:
1(IntegerType):-> 30


Id: 2
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 32
Output:
10
30
32
30
Filetable:
Heap:
1(IntegerType):-> 30


Id: 3
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 3
Execution stack:
RefType IntegerType v
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 3
Execution stack:
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 3
Execution stack:
new(v, 20)
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 3
Execution stack:
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 3
Execution stack:
RefType RefType IntegerType a
new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 3
Execution stack:
new(a, v); print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 3
Execution stack:
new(a, v)
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 3
Execution stack:
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 3
Execution stack:
print(v)
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 3
Execution stack:
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 3
Execution stack:
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Ref(2,RefType IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
RefType IntegerType a; IntegerType count; While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType IntegerType a
IntegerType count; While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
IntegerType count; While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
IntegerType count
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 2
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
Filetable:
Heap:


Id: 2
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 3
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
Filetable:
Heap:


Id: 3
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
Filetable:
Heap:
1(IntegerType):-> 0


Id: 3
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:
1(IntegerType):-> 0


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:
1(IntegerType):-> 0


Id: 3
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
count(IntegerType):-> 0
Output:
0
Filetable:
Heap:
1(IntegerType):-> 0


Id: 4
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:
1(IntegerType):-> 0


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
Filetable:
Heap:


Id: 4
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:


Id: 5
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
Filetable:
Heap:


Id: 5
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
Filetable:
Heap:
2(IntegerType):-> 1


Id: 5
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(2,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:
2(IntegerType):-> 1


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:
2(IntegerType):-> 1


Id: 5
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(2,IntegerType)
count(IntegerType):-> 1
Output:
0
1
Filetable:
Heap:
2(IntegerType):-> 1


Id: 6
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:
2(IntegerType):-> 1


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
Filetable:
Heap:


Id: 6
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:


Id: 7
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
Filetable:
Heap:


Id: 7
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
Filetable:
Heap:
3(IntegerType):-> 2


Id: 7
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(3,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:
3(IntegerType):-> 2


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:
3(IntegerType):-> 2


Id: 7
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(3,IntegerType)
count(IntegerType):-> 2
Output:
0
1
2
Filetable:
Heap:
3(IntegerType):-> 2


Id: 8
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:
3(IntegerType):-> 2


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
Filetable:
Heap:


Id: 8
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:


Id: 9
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
Filetable:
Heap:


Id: 9
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:


Id: 1
Execution stack:
RefType IntegerType a; IntegerType count; While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType IntegerType a
IntegerType count; While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
IntegerType count; While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
IntegerType count
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 2
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
Filetable:
Heap:


Id: 2
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 3
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
Filetable:
Heap:


Id: 3
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
Filetable:
Heap:
1(IntegerType):-> 0


Id: 3
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:
1(IntegerType):-> 0


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:
1(IntegerType):-> 0


Id: 3
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
count(IntegerType):-> 0
Output:
0
Filetable:
Heap:
1(IntegerType):-> 0


Id: 4
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:
1(IntegerType):-> 0


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
Filetable:
Heap:


Id: 4
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:


Id: 5
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
Filetable:
Heap:


Id: 5
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
Filetable:
Heap:
2(IntegerType):-> 1


Id: 5
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(2,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:
2(IntegerType):-> 1


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:
2(IntegerType):-> 1


Id: 5
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(2,IntegerType)
count(IntegerType):-> 1
Output:
0
1
Filetable:
Heap:
2(IntegerType):-> 1


Id: 6
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:
2(IntegerType):-> 1


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
Filetable:
Heap:


Id: 6
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:


Id: 7
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
Filetable:
Heap:


Id: 7
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
Filetable:
Heap:
3(IntegerType):-> 2


Id: 7
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(3,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:
3(IntegerType):-> 2


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:
3(IntegerType):-> 2


Id: 7
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(3,IntegerType)
count(IntegerType):-> 2
Output:
0
1
2
Filetable:
Heap:
3(IntegerType):-> 2


Id: 8
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:
3(IntegerType):-> 2


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
Filetable:
Heap:


Id: 8
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:


Id: 9
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
Filetable:
Heap:


Id: 9
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
Filetable:
Heap:
4(IntegerType):-> 3


Id: 9
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(4,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:
4(IntegerType):-> 3


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:
4(IntegerType):-> 3


Id: 9
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(4,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
3
Filetable:
Heap:
4(IntegerType):-> 3


Id: 10
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:
4(IntegerType):-> 3


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
Filetable:
Heap:


Id: 10
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:


Id: 11
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
Filetable:
Heap:


Id: 11
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
Filetable:
Heap:
5(IntegerType):-> 4


Id: 11
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(5,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:
5(IntegerType):-> 4


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:
5(IntegerType):-> 4


Id: 11
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(5,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
4
Filetable:
Heap:
5(IntegerType):-> 4


Id: 12
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:
5(IntegerType):-> 4


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 12
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 13
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 13
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
Filetable:
Heap:
6(IntegerType):-> 5


Id: 13
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(6,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:
6(IntegerType):-> 5


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:
6(IntegerType):-> 5


Id: 13
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(6,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
5
Filetable:
Heap:
6(IntegerType):-> 5


Id: 14
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:
6(IntegerType):-> 5


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 14
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 15
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 15
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
Filetable:
Heap:
7(IntegerType):-> 6


Id: 15
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(7,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:
7(IntegerType):-> 6


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
7(IntegerType):-> 6


Id: 15
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(7,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
7(IntegerType):-> 6


Id: 16
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
7(IntegerType):-> 6


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 16
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 17
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 17
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
8(IntegerType):-> 7


Id: 17
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(8,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
8(IntegerType):-> 7


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
8(IntegerType):-> 7


Id: 17
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(8,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
8(IntegerType):-> 7


Id: 18
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
8(IntegerType):-> 7


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 18
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 19
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 19
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
9(IntegerType):-> 8


Id: 19
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(9,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
9(IntegerType):-> 8


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:
9(IntegerType):-> 8


Id: 19
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(9,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:
9(IntegerType):-> 8


Id: 20
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:
9(IntegerType):-> 8


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 10
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 20
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 21
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 1
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 10
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 21
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 21
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(10,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:
10(IntegerType):-> 9


Id: 21
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(10,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
9
Filetable:
Heap:
10(IntegerType):-> 9


Id: 1
Execution stack:
RefType IntegerType a; IntegerType count; While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType IntegerType a
IntegerType count; While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
IntegerType count; While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
IntegerType count
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 2
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
Filetable:
Heap:


Id: 2
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 3
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
Filetable:
Heap:


Id: 3
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
Filetable:
Heap:
1(IntegerType):-> 0


Id: 3
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:
1(IntegerType):-> 0


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:
1(IntegerType):-> 0


Id: 3
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
count(IntegerType):-> 0
Output:
0
Filetable:
Heap:
1(IntegerType):-> 0


Id: 4
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:
1(IntegerType):-> 0


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
Filetable:
Heap:


Id: 4
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:


Id: 5
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
Filetable:
Heap:


Id: 5
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
Filetable:
Heap:
2(IntegerType):-> 1


Id: 5
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(2,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:
2(IntegerType):-> 1


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:
2(IntegerType):-> 1


Id: 5
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(2,IntegerType)
count(IntegerType):-> 1
Output:
0
1
Filetable:
Heap:
2(IntegerType):-> 1


Id: 6
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:
2(IntegerType):-> 1


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
Filetable:
Heap:


Id: 6
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:


Id: 7
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
Filetable:
Heap:


Id: 7
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
Filetable:
Heap:
3(IntegerType):-> 2


Id: 7
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(3,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:
3(IntegerType):-> 2


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:
3(IntegerType):-> 2


Id: 7
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(3,IntegerType)
count(IntegerType):-> 2
Output:
0
1
2
Filetable:
Heap:
3(IntegerType):-> 2


Id: 8
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:
3(IntegerType):-> 2


Id: 1
Execution stack:
RefType IntegerType a; IntegerType count; While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType IntegerType a
IntegerType count; While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
IntegerType count; While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
IntegerType count
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 2
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
Filetable:
Heap:


Id: 2
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 3
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
Filetable:
Heap:


Id: 3
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
Filetable:
Heap:
1(IntegerType):-> 0


Id: 3
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:
1(IntegerType):-> 0


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:
1(IntegerType):-> 0


Id: 3
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
count(IntegerType):-> 0
Output:
0
Filetable:
Heap:
1(IntegerType):-> 0


Id: 4
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:
1(IntegerType):-> 0


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
Filetable:
Heap:


Id: 4
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:


Id: 5
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
Filetable:
Heap:


Id: 5
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
Filetable:
Heap:
2(IntegerType):-> 1


Id: 5
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(2,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:
2(IntegerType):-> 1


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:
2(IntegerType):-> 1


Id: 5
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(2,IntegerType)
count(IntegerType):-> 1
Output:
0
1
Filetable:
Heap:
2(IntegerType):-> 1


Id: 6
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:
2(IntegerType):-> 1


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
Filetable:
Heap:


Id: 6
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:


Id: 7
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
Filetable:
Heap:


Id: 7
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
Filetable:
Heap:
3(IntegerType):-> 2


Id: 7
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(3,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:
3(IntegerType):-> 2


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:
3(IntegerType):-> 2


Id: 7
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(3,IntegerType)
count(IntegerType):-> 2
Output:
0
1
2
Filetable:
Heap:
3(IntegerType):-> 2


Id: 8
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:
3(IntegerType):-> 2


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
Filetable:
Heap:


Id: 8
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:


Id: 9
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
Filetable:
Heap:


Id: 9
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
Filetable:
Heap:
4(IntegerType):-> 3


Id: 9
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(4,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:
4(IntegerType):-> 3


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:
4(IntegerType):-> 3


Id: 9
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(4,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
3
Filetable:
Heap:
4(IntegerType):-> 3


Id: 10
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:
4(IntegerType):-> 3


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
Filetable:
Heap:


Id: 10
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:


Id: 11
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
Filetable:
Heap:


Id: 11
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
Filetable:
Heap:
5(IntegerType):-> 4


Id: 11
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(5,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:
5(IntegerType):-> 4


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:
5(IntegerType):-> 4


Id: 11
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(5,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
4
Filetable:
Heap:
5(IntegerType):-> 4


Id: 12
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:
5(IntegerType):-> 4


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 12
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 13
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 13
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
Filetable:
Heap:
6(IntegerType):-> 5


Id: 13
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(6,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:
6(IntegerType):-> 5


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:
6(IntegerType):-> 5


Id: 13
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(6,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
5
Filetable:
Heap:
6(IntegerType):-> 5


Id: 14
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:
6(IntegerType):-> 5


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 14
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 15
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 15
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
Filetable:
Heap:
7(IntegerType):-> 6


Id: 15
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(7,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:
7(IntegerType):-> 6


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
7(IntegerType):-> 6


Id: 15
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(7,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
7(IntegerType):-> 6


Id: 16
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
7(IntegerType):-> 6


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 16
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 17
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 17
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
8(IntegerType):-> 7


Id: 17
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(8,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
8(IntegerType):-> 7


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
8(IntegerType):-> 7


Id: 17
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(8,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
8(IntegerType):-> 7


Id: 18
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
8(IntegerType):-> 7


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 18
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 19
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 19
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 1
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
9(IntegerType):-> 8


Id: 19
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(9,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
9(IntegerType):-> 8


Id: 1
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:
9(IntegerType):-> 8


Id: 19
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(9,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:
9(IntegerType):-> 8


Id: 20
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:
9(IntegerType):-> 8


Id: 1
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 10
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 20
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 21
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 1
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 10
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 21
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 21
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(10,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:
10(IntegerType):-> 9


Id: 21
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(10,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
9
Filetable:
Heap:
10(IntegerType):-> 9


Id: 22
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 23
Execution stack:
RefType IntegerType v; new(v, 20); print(readHeap(v)); writeHeap(v, 30); print((readHeap(v) + 5))
SymTable:
Output:
Filetable:
Heap:


Id: 24
Execution stack:
StringType varf; varf = "test.txt"; openRFile(varf); IntegerType varc; readFile(varf, varc); print(varc); readFile(varf, varc); print(varc); closeRFile(varf)
SymTable:
Output:
Filetable:
Heap:


Id: 25
Execution stack:
BooleanType a; a = false; IntegerType v; if(a)then {v = 2} else {v = 3}
SymTable:
Output:
Filetable:
Heap:


Id: 26
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); print(readHeap(v)); print((readHeap(readHeap(a)) + 5))
SymTable:
Output:
Filetable:
Heap:


Id: 27
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); new(v, 30); print(readHeap(readHeap(a)))
SymTable:
Output:
Filetable:
Heap:


Id: 28
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); new(v, 30); print(readHeap(readHeap(a)))
SymTable:
Output:
Filetable:
Heap:


Id: 29
Execution stack:
StringType varf; varf = "test.txt"; openRFile(varf); IntegerType varc; readFile(varf, varc); print(varc); readFile(varf, varc); print(varc); closeRFile(varf)
SymTable:
Output:
Filetable:
Heap:


Id: 29
Execution stack:
StringType varf
varf = "test.txt"; openRFile(varf); IntegerType varc; readFile(varf, varc); print(varc); readFile(varf, varc); print(varc); closeRFile(varf)
SymTable:
Output:
Filetable:
Heap:


Id: 29
Execution stack:
varf = "test.txt"; openRFile(varf); IntegerType varc; readFile(varf, varc); print(varc); readFile(varf, varc); print(varc); closeRFile(varf)
SymTable:
varf(StringType):-> ""
Output:
Filetable:
Heap:


Id: 29
Execution stack:
varf = "test.txt"
openRFile(varf); IntegerType varc; readFile(varf, varc); print(varc); readFile(varf, varc); print(varc); closeRFile(varf)
SymTable:
varf(StringType):-> ""
Output:
Filetable:
Heap:


Id: 29
Execution stack:
openRFile(varf); IntegerType varc; readFile(varf, varc); print(varc); readFile(varf, varc); print(varc); closeRFile(varf)
SymTable:
varf(StringType):-> "test.txt"
Output:
Filetable:
Heap:


Id: 29
Execution stack:
openRFile(varf)
IntegerType varc; readFile(varf, varc); print(varc); readFile(varf, varc); print(varc); closeRFile(varf)
SymTable:
varf(StringType):-> "test.txt"
Output:
Filetable:
Heap:


Id: 29
Execution stack:
IntegerType varc; readFile(varf, varc); print(varc); readFile(varf, varc); print(varc); closeRFile(varf)
SymTable:
varf(StringType):-> "test.txt"
Output:
Filetable:
test.txt
Heap:


Id: 29
Execution stack:
IntegerType varc
readFile(varf, varc); print(varc); readFile(varf, varc); print(varc); closeRFile(varf)
SymTable:
varf(StringType):-> "test.txt"
Output:
Filetable:
test.txt
Heap:


Id: 29
Execution stack:
readFile(varf, varc); print(varc); readFile(varf, varc); print(varc); closeRFile(varf)
SymTable:
varf(StringType):-> "test.txt"
varc(IntegerType):-> 0
Output:
Filetable:
test.txt
Heap:


Id: 29
Execution stack:
readFile(varf, varc)
print(varc); readFile(varf, varc); print(varc); closeRFile(varf)
SymTable:
varf(StringType):-> "test.txt"
varc(IntegerType):-> 0
Output:
Filetable:
test.txt
Heap:


Id: 29
Execution stack:
print(varc); readFile(varf, varc); print(varc); closeRFile(varf)
SymTable:
varf(StringType):-> "test.txt"
varc(IntegerType):-> 15
Output:
Filetable:
test.txt
Heap:


Id: 29
Execution stack:
print(varc)
readFile(varf, varc); print(varc); closeRFile(varf)
SymTable:
varf(StringType):-> "test.txt"
varc(IntegerType):-> 15
Output:
Filetable:
test.txt
Heap:


Id: 29
Execution stack:
readFile(varf, varc); print(varc); closeRFile(varf)
SymTable:
varf(StringType):-> "test.txt"
varc(IntegerType):-> 15
Output:
15
Filetable:
test.txt
Heap:


Id: 29
Execution stack:
readFile(varf, varc)
print(varc); closeRFile(varf)
SymTable:
varf(StringType):-> "test.txt"
varc(IntegerType):-> 15
Output:
15
Filetable:
test.txt
Heap:


Id: 29
Execution stack:
print(varc); closeRFile(varf)
SymTable:
varf(StringType):-> "test.txt"
varc(IntegerType):-> 50
Output:
15
Filetable:
test.txt
Heap:


Id: 29
Execution stack:
print(varc)
closeRFile(varf)
SymTable:
varf(StringType):-> "test.txt"
varc(IntegerType):-> 50
Output:
15
Filetable:
test.txt
Heap:


Id: 29
Execution stack:
closeRFile(varf)
SymTable:
varf(StringType):-> "test.txt"
varc(IntegerType):-> 50
Output:
15
50
Filetable:
test.txt
Heap:


Id: 29
Execution stack:
SymTable:
varf(StringType):-> "test.txt"
varc(IntegerType):-> 50
Output:
15
50
Filetable:
Heap:


Id: 30
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 30
Execution stack:
RefType IntegerType v
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 30
Execution stack:
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 30
Execution stack:
new(v, 20)
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 30
Execution stack:
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 30
Execution stack:
RefType RefType IntegerType a
new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 30
Execution stack:
new(a, v); print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 30
Execution stack:
new(a, v)
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 30
Execution stack:
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 30
Execution stack:
print(v)
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 30
Execution stack:
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 30
Execution stack:
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Ref(2,RefType IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 31
Execution stack:
IntegerType v; v = 4; While((v > 0)){print(v); v = (v - 1)};; print(v)
SymTable:
Output:
Filetable:
Heap:


Id: 32
Execution stack:
IntegerType v; RefType IntegerType a; v = 10; new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
Output:
Filetable:
Heap:


Id: 33
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); new(v, 30); print(readHeap(readHeap(a)))
SymTable:
Output:
Filetable:
Heap:


Id: 34
Execution stack:
RefType IntegerType v; new(v, 20); print(readHeap(v)); writeHeap(v, 30); print((readHeap(v) + 5))
SymTable:
Output:
Filetable:
Heap:


Id: 35
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); print(readHeap(v)); print((readHeap(readHeap(a)) + 5))
SymTable:
Output:
Filetable:
Heap:


Id: 36
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 37
Execution stack:
StringType varf; varf = "test.txt"; openRFile(varf); IntegerType varc; readFile(varf, varc); print(varc); readFile(varf, varc); print(varc); closeRFile(varf)
SymTable:
Output:
Filetable:
Heap:


Id: 38
Execution stack:
BooleanType a; a = false; IntegerType v; if(a)then {v = 2} else {v = 3}
SymTable:
Output:
Filetable:
Heap:


Id: 39
Execution stack:
IntegerType a; a = (2 + (3 * 5)); IntegerType b; b = ((a - (4 / 2)) + 7); print(b)
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType IntegerType v
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(v, 20)
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
RefType RefType IntegerType a
new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
new(a, v); print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
new(a, v)
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
print(v)
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Ref(2,RefType IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
RefType IntegerType v1; new(v1, 2); RefType IntegerType cnt; newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
RefType IntegerType v1
new(v1, 2); RefType IntegerType cnt; newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2); RefType IntegerType cnt; newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2)
RefType IntegerType cnt; newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
RefType IntegerType cnt; newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
RefType IntegerType cnt
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(RefType IntegerType):-> Ref(0,IntegerType)
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1)
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(RefType IntegerType):-> Ref(0,IntegerType)
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 2
Execution stack:
NOP
SymTable:
Output:
Filetable:
Heap:



Id: 2
Execution stack:
NOP
SymTable:
Output:
Filetable:
Heap:



Id: 2
Execution stack:
SymTable:
Output:
Filetable:
Heap:



Id: 3
Execution stack:
RefType IntegerType v1; new(v1, 2); RefType IntegerType cnt; newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 3
Execution stack:
RefType IntegerType v1
new(v1, 2); RefType IntegerType cnt; newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 3
Execution stack:
new(v1, 2); RefType IntegerType cnt; newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 3
Execution stack:
new(v1, 2)
RefType IntegerType cnt; newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 3
Execution stack:
RefType IntegerType cnt; newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 3
Execution stack:
RefType IntegerType cnt
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 3
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(RefType IntegerType):-> Ref(0,IntegerType)
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
RefType IntegerType v1; IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
RefType IntegerType v1
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2)
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1)
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1761afa1


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt))
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1761afa1


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1761afa1


Id: 2
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1761afa1


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt))
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1761afa1


Id: 2
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1761afa1


Id: 1
Execution stack:
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1761afa1


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1761afa1


Id: 3
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1761afa1


Id: 1
Execution stack:
ToyAcquire(cnt)
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1761afa1


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10))
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1761afa1


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1761afa1


Id: 1
Execution stack:
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1761afa1


Id: 2
Execution stack:
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1761afa1


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1761afa1


Id: 1
Execution stack:
print((readHeap(v1) - 1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1761afa1


Id: 2
Execution stack:
print(readHeap(v1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1761afa1


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1761afa1


Id: 1
Execution stack:
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1761afa1


Id: 2
Execution stack:
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1761afa1


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1761afa1


Id: 1
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1761afa1


Id: 2
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1761afa1


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1761afa1


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1761afa1


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1761afa1


Id: 1
Execution stack:
RefType IntegerType v1; IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
RefType IntegerType v1
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2)
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1)
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt))
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 2
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt))
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 2
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 1
Execution stack:
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 3
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 1
Execution stack:
ToyAcquire(cnt)
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10))
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 1
Execution stack:
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@31b00e0e


Id: 2
Execution stack:
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@31b00e0e


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@31b00e0e


Id: 1
Execution stack:
print((readHeap(v1) - 1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@31b00e0e


Id: 2
Execution stack:
print(readHeap(v1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@31b00e0e


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@31b00e0e


Id: 1
Execution stack:
RefType IntegerType v1; IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
RefType IntegerType v1
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2)
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1)
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt))
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 2
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt))
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 2
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 1
Execution stack:
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 3
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 1
Execution stack:
ToyAcquire(cnt)
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10))
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 1
Execution stack:
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3fe2df49


Id: 2
Execution stack:
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3fe2df49


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3fe2df49


Id: 1
Execution stack:
print((readHeap(v1) - 1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3fe2df49


Id: 2
Execution stack:
print(readHeap(v1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3fe2df49


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3fe2df49


Id: 4
Execution stack:
RefType IntegerType v1; IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
RefType IntegerType v1; IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
RefType IntegerType v1
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2)
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1)
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@214eb9b5


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt))
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@214eb9b5


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@214eb9b5


Id: 2
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@214eb9b5


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt))
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@214eb9b5


Id: 2
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@214eb9b5


Id: 1
Execution stack:
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@214eb9b5


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@214eb9b5


Id: 3
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@214eb9b5


Id: 1
Execution stack:
ToyAcquire(cnt)
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@214eb9b5


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10))
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@214eb9b5


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@214eb9b5


Id: 1
Execution stack:
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@214eb9b5


Id: 2
Execution stack:
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@214eb9b5


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@214eb9b5


Id: 1
Execution stack:
RefType IntegerType v1; IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
RefType IntegerType v1
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2)
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1)
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1e41d932


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt))
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1e41d932


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1e41d932


Id: 2
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1e41d932


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt))
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1e41d932


Id: 2
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1e41d932


Id: 1
Execution stack:
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1e41d932


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1e41d932


Id: 3
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1e41d932


Id: 1
Execution stack:
ToyAcquire(cnt)
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1e41d932


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10))
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1e41d932


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1e41d932


Id: 1
Execution stack:
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1e41d932


Id: 2
Execution stack:
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1e41d932


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1e41d932


Id: 1
Execution stack:
print((readHeap(v1) - 1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1e41d932


Id: 2
Execution stack:
print(readHeap(v1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1e41d932


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1e41d932


Id: 1
Execution stack:
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1e41d932


Id: 2
Execution stack:
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1e41d932


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1e41d932


Id: 1
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1e41d932


Id: 2
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1e41d932


Id: 3
Execution stack:
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1e41d932


Id: 3
Execution stack:
writeHeap(v1, (readHeap(v1) * 10))
writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1e41d932


Id: 3
Execution stack:
writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 200

1 -> utils.Triplet@1e41d932


Id: 3
Execution stack:
writeHeap(v1, (readHeap(v1) * 2))
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 200

1 -> utils.Triplet@1e41d932


Id: 3
Execution stack:
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 400

1 -> utils.Triplet@1e41d932


Id: 3
Execution stack:
print(readHeap(v1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 400

1 -> utils.Triplet@1e41d932


Id: 3
Execution stack:
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
400
Filetable:
Heap:
1(IntegerType):-> 400

1 -> utils.Triplet@1e41d932


Id: 3
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
400
Filetable:
Heap:
1(IntegerType):-> 400

1 -> utils.Triplet@1e41d932


Id: 1
Execution stack:
RefType IntegerType v1; IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
RefType IntegerType v1
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2)
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1)
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3bc815ca


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt))
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3bc815ca


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3bc815ca


Id: 2
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3bc815ca


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt))
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3bc815ca


Id: 2
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3bc815ca


Id: 1
Execution stack:
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3bc815ca


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3bc815ca


Id: 3
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3bc815ca


Id: 1
Execution stack:
ToyAcquire(cnt)
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3bc815ca


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10))
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3bc815ca


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3bc815ca


Id: 1
Execution stack:
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3bc815ca


Id: 2
Execution stack:
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3bc815ca


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3bc815ca


Id: 1
Execution stack:
print((readHeap(v1) - 1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3bc815ca


Id: 2
Execution stack:
print(readHeap(v1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3bc815ca


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3bc815ca


Id: 1
Execution stack:
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3bc815ca


Id: 2
Execution stack:
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3bc815ca


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3bc815ca


Id: 1
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3bc815ca


Id: 2
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3bc815ca


Id: 3
Execution stack:
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3bc815ca


Id: 3
Execution stack:
writeHeap(v1, (readHeap(v1) * 10))
writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3bc815ca


Id: 3
Execution stack:
writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 200

1 -> utils.Triplet@3bc815ca


Id: 3
Execution stack:
writeHeap(v1, (readHeap(v1) * 2))
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 200

1 -> utils.Triplet@3bc815ca


Id: 3
Execution stack:
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 400

1 -> utils.Triplet@3bc815ca


Id: 3
Execution stack:
print(readHeap(v1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 400

1 -> utils.Triplet@3bc815ca


Id: 3
Execution stack:
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
400
Filetable:
Heap:
1(IntegerType):-> 400

1 -> utils.Triplet@3bc815ca


Id: 3
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
400
Filetable:
Heap:
1(IntegerType):-> 400

1 -> utils.Triplet@3bc815ca


Id: 1
Execution stack:
RefType IntegerType v1; IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
RefType IntegerType v1
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2)
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1)
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt))
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 2
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt))
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 2
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 1
Execution stack:
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 3
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 1
Execution stack:
ToyAcquire(cnt)
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10))
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@31b00e0e


Id: 1
Execution stack:
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@31b00e0e


Id: 2
Execution stack:
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@31b00e0e


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@31b00e0e


Id: 1
Execution stack:
print((readHeap(v1) - 1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@31b00e0e


Id: 2
Execution stack:
print(readHeap(v1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@31b00e0e


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@31b00e0e


Id: 1
Execution stack:
RefType IntegerType v1; IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
RefType IntegerType v1
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2)
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1)
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1da87312


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt))
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1da87312


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1da87312


Id: 2
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1da87312


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt))
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1da87312


Id: 2
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1da87312


Id: 1
Execution stack:
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1da87312


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1da87312


Id: 3
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1da87312


Id: 1
Execution stack:
ToyAcquire(cnt)
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1da87312


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10))
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1da87312


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@1da87312


Id: 1
Execution stack:
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1da87312


Id: 2
Execution stack:
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1da87312


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1da87312


Id: 1
Execution stack:
print((readHeap(v1) - 1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1da87312


Id: 2
Execution stack:
print(readHeap(v1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1da87312


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1da87312


Id: 1
Execution stack:
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
19
20
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1da87312


Id: 2
Execution stack:
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
19
20
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1da87312


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
19
20
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1da87312


Id: 1
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
19
20
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1da87312


Id: 2
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
19
20
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1da87312


Id: 3
Execution stack:
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
19
20
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1da87312


Id: 3
Execution stack:
writeHeap(v1, (readHeap(v1) * 10))
writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
19
20
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@1da87312


Id: 3
Execution stack:
writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
19
20
Filetable:
Heap:
1(IntegerType):-> 200

1 -> utils.Triplet@1da87312


Id: 3
Execution stack:
writeHeap(v1, (readHeap(v1) * 2))
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
19
20
Filetable:
Heap:
1(IntegerType):-> 200

1 -> utils.Triplet@1da87312


Id: 3
Execution stack:
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
19
20
Filetable:
Heap:
1(IntegerType):-> 400

1 -> utils.Triplet@1da87312


Id: 3
Execution stack:
print(readHeap(v1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
19
20
Filetable:
Heap:
1(IntegerType):-> 400

1 -> utils.Triplet@1da87312


Id: 3
Execution stack:
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
19
20
400
Filetable:
Heap:
1(IntegerType):-> 400

1 -> utils.Triplet@1da87312


Id: 3
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
19
20
400
Filetable:
Heap:
1(IntegerType):-> 400

1 -> utils.Triplet@1da87312


Id: 4
Execution stack:
RefType IntegerType v1; IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 4
Execution stack:
RefType IntegerType v1
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 4
Execution stack:
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 4
Execution stack:
IntegerType cnt
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 4
Execution stack:
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 4
Execution stack:
new(v1, 2)
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 4
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 4
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1)
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 4
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@d8fc412


Id: 4
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt))
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@d8fc412


Id: 4
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@d8fc412


Id: 5
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@d8fc412


Id: 4
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt))
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@d8fc412


Id: 5
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@d8fc412


Id: 4
Execution stack:
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@d8fc412


Id: 5
Execution stack:
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@d8fc412


Id: 6
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@d8fc412


Id: 4
Execution stack:
ToyAcquire(cnt)
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@d8fc412


Id: 5
Execution stack:
writeHeap(v1, (readHeap(v1) * 10))
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@d8fc412


Id: 6
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@d8fc412


Id: 4
Execution stack:
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@d8fc412


Id: 5
Execution stack:
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@d8fc412


Id: 6
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@d8fc412


Id: 4
Execution stack:
print((readHeap(v1) - 1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@d8fc412


Id: 5
Execution stack:
print(readHeap(v1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@d8fc412


Id: 6
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@d8fc412


Id: 1
Execution stack:
RefType IntegerType v1; IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
RefType IntegerType v1
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2)
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1)
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt))
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 2
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt))
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 2
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 1
Execution stack:
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 3
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 1
Execution stack:
ToyAcquire(cnt)
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10))
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@3fe2df49


Id: 1
Execution stack:
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3fe2df49


Id: 2
Execution stack:
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3fe2df49


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3fe2df49


Id: 1
Execution stack:
print((readHeap(v1) - 1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3fe2df49


Id: 2
Execution stack:
print(readHeap(v1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3fe2df49


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3fe2df49


Id: 1
Execution stack:
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3fe2df49


Id: 2
Execution stack:
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3fe2df49


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3fe2df49


Id: 1
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3fe2df49


Id: 2
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3fe2df49


Id: 3
Execution stack:
writeHeap(v1, (readHeap(v1) * 10)); writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3fe2df49


Id: 3
Execution stack:
writeHeap(v1, (readHeap(v1) * 10))
writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@3fe2df49


Id: 3
Execution stack:
writeHeap(v1, (readHeap(v1) * 2)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 200

1 -> utils.Triplet@3fe2df49


Id: 3
Execution stack:
writeHeap(v1, (readHeap(v1) * 2))
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 200

1 -> utils.Triplet@3fe2df49


Id: 3
Execution stack:
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 400

1 -> utils.Triplet@3fe2df49


Id: 3
Execution stack:
print(readHeap(v1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 400

1 -> utils.Triplet@3fe2df49


Id: 3
Execution stack:
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
400
Filetable:
Heap:
1(IntegerType):-> 400

1 -> utils.Triplet@3fe2df49


Id: 3
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
400
Filetable:
Heap:
1(IntegerType):-> 400

1 -> utils.Triplet@3fe2df49


Id: 1
Execution stack:
RefType IntegerType v1; IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
RefType IntegerType v1
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt; new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
IntegerType cnt
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2); newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
new(v1, 2)
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
newToySemaphore (cnt, readHeap(v1), 1)
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 0
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2



Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@147dfc3


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt))
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@147dfc3


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)); ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@147dfc3


Id: 2
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@147dfc3


Id: 1
Execution stack:
fork(ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt))
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@147dfc3


Id: 2
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@147dfc3


Id: 1
Execution stack:
ToyAcquire(cnt); print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@147dfc3


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@147dfc3


Id: 3
Execution stack:
ToyAcquire(cnt); writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@147dfc3


Id: 1
Execution stack:
ToyAcquire(cnt)
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@147dfc3


Id: 2
Execution stack:
writeHeap(v1, (readHeap(v1) * 10))
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@147dfc3


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 2

1 -> utils.Triplet@147dfc3


Id: 1
Execution stack:
print((readHeap(v1) - 1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@147dfc3


Id: 2
Execution stack:
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@147dfc3


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@147dfc3


Id: 1
Execution stack:
print((readHeap(v1) - 1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@147dfc3


Id: 2
Execution stack:
print(readHeap(v1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@147dfc3


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@147dfc3


Id: 1
Execution stack:
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@147dfc3


Id: 2
Execution stack:
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@147dfc3


Id: 3
Execution stack:
ToyAcquire(cnt)
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@147dfc3


Id: 1
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@147dfc3


Id: 2
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@147dfc3


Id: 3
Execution stack:
writeHeap(v1, (readHeap(v1) * 10)); print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@147dfc3


Id: 3
Execution stack:
writeHeap(v1, (readHeap(v1) * 10))
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 20

1 -> utils.Triplet@147dfc3


Id: 3
Execution stack:
print(readHeap(v1)); ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 200

1 -> utils.Triplet@147dfc3


Id: 3
Execution stack:
print(readHeap(v1))
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
Filetable:
Heap:
1(IntegerType):-> 200

1 -> utils.Triplet@147dfc3


Id: 3
Execution stack:
ToyRelease (cnt)
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
200
Filetable:
Heap:
1(IntegerType):-> 200

1 -> utils.Triplet@147dfc3


Id: 3
Execution stack:
SymTable:
cnt(IntegerType):-> 1
v1(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
19
200
Filetable:
Heap:
1(IntegerType):-> 200

1 -> utils.Triplet@147dfc3


