Id: 1
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType IntegerType v
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(v, 20)
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
RefType RefType IntegerType a
new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
new(a, v); print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
new(a, v)
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
print(v)
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Ref(2,RefType IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType IntegerType v
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(v, 20)
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
RefType RefType IntegerType a
new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
new(a, v); print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
new(a, v)
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
print(v)
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Ref(2,RefType IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType IntegerType v
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(v, 20)
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
RefType RefType IntegerType a
new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
new(a, v); print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
new(a, v)
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
print(v)
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Ref(2,RefType IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType IntegerType v
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(v, 20)
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
RefType RefType IntegerType a
new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
new(a, v); print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
new(a, v)
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
print(v)
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Ref(2,RefType IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType IntegerType v
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(v, 20)
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
RefType RefType IntegerType a
new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
new(a, v); print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
new(a, v)
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
print(v)
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Ref(2,RefType IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType IntegerType v
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(v, 20)
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
RefType RefType IntegerType a
new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
new(a, v); print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
new(a, v)
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
print(v)
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Ref(2,RefType IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); new(v, 30); print(readHeap(readHeap(a)))
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType IntegerType v
new(v, 20); RefType RefType IntegerType a; new(a, v); new(v, 30); print(readHeap(readHeap(a)))
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(v, 20); RefType RefType IntegerType a; new(a, v); new(v, 30); print(readHeap(readHeap(a)))
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(v, 20)
RefType RefType IntegerType a; new(a, v); new(v, 30); print(readHeap(readHeap(a)))
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType RefType IntegerType a; new(a, v); new(v, 30); print(readHeap(readHeap(a)))
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
RefType RefType IntegerType a
new(a, v); new(v, 30); print(readHeap(readHeap(a)))
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
new(a, v); new(v, 30); print(readHeap(readHeap(a)))
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
new(a, v)
new(v, 30); print(readHeap(readHeap(a)))
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
new(v, 30); print(readHeap(readHeap(a)))
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
new(v, 30)
print(readHeap(readHeap(a)))
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 1
Execution stack:
print(readHeap(readHeap(a)))
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)
3(IntegerType):-> 30


Id: 1
Execution stack:
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)
3(IntegerType):-> 30


Id: 2
Execution stack:
IntegerType v; v = 4; While((v > 0)){print(v); v = (v - 1)};; print(v)
SymTable:
Output:
Filetable:
Heap:


Id: 2
Execution stack:
IntegerType v
v = 4; While((v > 0)){print(v); v = (v - 1)};; print(v)
SymTable:
Output:
Filetable:
Heap:


Id: 2
Execution stack:
v = 4; While((v > 0)){print(v); v = (v - 1)};; print(v)
SymTable:
v(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 2
Execution stack:
v = 4
While((v > 0)){print(v); v = (v - 1)};; print(v)
SymTable:
v(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 2
Execution stack:
While((v > 0)){print(v); v = (v - 1)};; print(v)
SymTable:
v(IntegerType):-> 4
Output:
Filetable:
Heap:


Id: 2
Execution stack:
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 4
Output:
Filetable:
Heap:


Id: 2
Execution stack:
print(v); v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 4
Output:
Filetable:
Heap:


Id: 2
Execution stack:
print(v)
v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 4
Output:
Filetable:
Heap:


Id: 2
Execution stack:
v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 4
Output:
4
Filetable:
Heap:


Id: 2
Execution stack:
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 3
Output:
4
Filetable:
Heap:


Id: 2
Execution stack:
print(v); v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 3
Output:
4
Filetable:
Heap:


Id: 2
Execution stack:
print(v)
v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 3
Output:
4
Filetable:
Heap:


Id: 2
Execution stack:
v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 3
Output:
4
3
Filetable:
Heap:


Id: 2
Execution stack:
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 2
Output:
4
3
Filetable:
Heap:


Id: 2
Execution stack:
print(v); v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 2
Output:
4
3
Filetable:
Heap:


Id: 2
Execution stack:
print(v)
v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 2
Output:
4
3
Filetable:
Heap:


Id: 2
Execution stack:
v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 2
Output:
4
3
2
Filetable:
Heap:


Id: 2
Execution stack:
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 1
Output:
4
3
2
Filetable:
Heap:


Id: 2
Execution stack:
print(v); v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 1
Output:
4
3
2
Filetable:
Heap:


Id: 2
Execution stack:
print(v)
v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 1
Output:
4
3
2
Filetable:
Heap:


Id: 2
Execution stack:
v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 1
Output:
4
3
2
1
Filetable:
Heap:


Id: 2
Execution stack:
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 0
Output:
4
3
2
1
Filetable:
Heap:


Id: 2
Execution stack:
print(v)
SymTable:
v(IntegerType):-> 0
Output:
4
3
2
1
Filetable:
Heap:


Id: 2
Execution stack:
SymTable:
v(IntegerType):-> 0
Output:
4
3
2
1
0
Filetable:
Heap:


Id: 3
Execution stack:
RefType IntegerType v; new(v, 20); new(v, 30)
SymTable:
Output:
Filetable:
Heap:


Id: 3
Execution stack:
RefType IntegerType v
new(v, 20); new(v, 30)
SymTable:
Output:
Filetable:
Heap:


Id: 3
Execution stack:
new(v, 20); new(v, 30)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 3
Execution stack:
new(v, 20)
new(v, 30)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 3
Execution stack:
new(v, 30)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 3
Execution stack:
SymTable:
v(RefType IntegerType):-> Ref(2,IntegerType)
Output:
Filetable:
Heap:
2(IntegerType):-> 30


Id: 4
Execution stack:
IntegerType v; RefType IntegerType a; v = 10; new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
Output:
Filetable:
Heap:


Id: 4
Execution stack:
IntegerType v
RefType IntegerType a; v = 10; new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
Output:
Filetable:
Heap:


Id: 4
Execution stack:
RefType IntegerType a; v = 10; new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
v(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 4
Execution stack:
RefType IntegerType a
v = 10; new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
v(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 4
Execution stack:
v = 10; new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
v(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 4
Execution stack:
v = 10
new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
v(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 4
Execution stack:
new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:


Id: 4
Execution stack:
new(a, 22)
fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:


Id: 4
Execution stack:
fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:
1(IntegerType):-> 22


Id: 4
Execution stack:
fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a)))
print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:
1(IntegerType):-> 22


Id: 4
Execution stack:
print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:
1(IntegerType):-> 22


Id: 5
Execution stack:
writeHeap(a, 30); v = 32; print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:
1(IntegerType):-> 22


Id: 4
Execution stack:
print(v)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:
1(IntegerType):-> 22


Id: 5
Execution stack:
writeHeap(a, 30)
v = 32; print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:
1(IntegerType):-> 22


Id: 4
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
10
Filetable:
Heap:
1(IntegerType):-> 30


Id: 5
Execution stack:
v = 32; print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
10
Filetable:
Heap:
1(IntegerType):-> 30


Id: 4
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
10
30
Filetable:
Heap:
1(IntegerType):-> 30


Id: 5
Execution stack:
v = 32
print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
10
30
Filetable:
Heap:
1(IntegerType):-> 30


Id: 5
Execution stack:
print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 32
Output:
10
30
Filetable:
Heap:
1(IntegerType):-> 30


Id: 5
Execution stack:
print(v)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 32
Output:
10
30
Filetable:
Heap:
1(IntegerType):-> 30


Id: 5
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 32
Output:
10
30
32
Filetable:
Heap:
1(IntegerType):-> 30


Id: 5
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 32
Output:
10
30
32
30
Filetable:
Heap:
1(IntegerType):-> 30


Id: 6
Execution stack:
RefType IntegerType a; IntegerType count; While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
Output:
Filetable:
Heap:


Id: 6
Execution stack:
RefType IntegerType a
IntegerType count; While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
Output:
Filetable:
Heap:


Id: 6
Execution stack:
IntegerType count; While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 6
Execution stack:
IntegerType count
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 6
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 6
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 7
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 6
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
Filetable:
Heap:


Id: 7
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 8
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
Filetable:
Heap:


Id: 8
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
Filetable:
Heap:
1(IntegerType):-> 0


Id: 8
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:
1(IntegerType):-> 0


Id: 6
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:
1(IntegerType):-> 0


Id: 8
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
count(IntegerType):-> 0
Output:
0
Filetable:
Heap:
1(IntegerType):-> 0


Id: 9
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:
1(IntegerType):-> 0


Id: 6
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
Filetable:
Heap:


Id: 9
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:


Id: 10
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
Filetable:
Heap:


Id: 10
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
Filetable:
Heap:
2(IntegerType):-> 1


Id: 10
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(2,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:
2(IntegerType):-> 1


Id: 6
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:
2(IntegerType):-> 1


Id: 10
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(2,IntegerType)
count(IntegerType):-> 1
Output:
0
1
Filetable:
Heap:
2(IntegerType):-> 1


Id: 11
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:
2(IntegerType):-> 1


Id: 6
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
Filetable:
Heap:


Id: 11
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:


Id: 12
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
Filetable:
Heap:


Id: 12
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
Filetable:
Heap:
3(IntegerType):-> 2


Id: 12
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(3,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:
3(IntegerType):-> 2


Id: 6
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:
3(IntegerType):-> 2


Id: 12
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(3,IntegerType)
count(IntegerType):-> 2
Output:
0
1
2
Filetable:
Heap:
3(IntegerType):-> 2


Id: 13
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:
3(IntegerType):-> 2


Id: 6
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
Filetable:
Heap:


Id: 13
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:


Id: 14
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
Filetable:
Heap:


Id: 14
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
Filetable:
Heap:
4(IntegerType):-> 3


Id: 14
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(4,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:
4(IntegerType):-> 3


Id: 6
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:
4(IntegerType):-> 3


Id: 14
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(4,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
3
Filetable:
Heap:
4(IntegerType):-> 3


Id: 15
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:
4(IntegerType):-> 3


Id: 6
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
Filetable:
Heap:


Id: 15
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:


Id: 16
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
Filetable:
Heap:


Id: 16
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
Filetable:
Heap:
5(IntegerType):-> 4


Id: 16
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(5,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:
5(IntegerType):-> 4


Id: 6
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:
5(IntegerType):-> 4


Id: 16
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(5,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
4
Filetable:
Heap:
5(IntegerType):-> 4


Id: 17
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:
5(IntegerType):-> 4


Id: 6
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 17
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 18
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 18
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
Filetable:
Heap:
6(IntegerType):-> 5


Id: 18
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(6,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:
6(IntegerType):-> 5


Id: 6
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:
6(IntegerType):-> 5


Id: 18
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(6,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
5
Filetable:
Heap:
6(IntegerType):-> 5


Id: 19
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:
6(IntegerType):-> 5


Id: 6
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 19
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 20
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 20
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
Filetable:
Heap:
7(IntegerType):-> 6


Id: 20
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(7,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:
7(IntegerType):-> 6


Id: 6
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
7(IntegerType):-> 6


Id: 20
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(7,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
7(IntegerType):-> 6


Id: 21
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
7(IntegerType):-> 6


Id: 6
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 21
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 22
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 22
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
8(IntegerType):-> 7


Id: 22
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(8,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
8(IntegerType):-> 7


Id: 6
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
8(IntegerType):-> 7


Id: 22
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(8,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
8(IntegerType):-> 7


Id: 23
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
8(IntegerType):-> 7


Id: 6
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 23
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 24
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 24
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 6
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
9(IntegerType):-> 8


Id: 24
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(9,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
9(IntegerType):-> 8


Id: 6
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:
9(IntegerType):-> 8


Id: 24
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(9,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:
9(IntegerType):-> 8


Id: 25
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:
9(IntegerType):-> 8


Id: 6
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 10
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 25
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 26
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 6
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 10
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 26
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 26
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(10,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:
10(IntegerType):-> 9


Id: 26
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(10,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
9
Filetable:
Heap:
10(IntegerType):-> 9


Id: 1
Execution stack:
RefType IntegerType v; new(v, 20); print(readHeap(v)); writeHeap(v, "a"); print((readHeap(v) + 5))
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
RefType IntegerType v
new(v, 20); print(readHeap(v)); writeHeap(v, "a"); print((readHeap(v) + 5))
SymTable:
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(v, 20); print(readHeap(v)); writeHeap(v, "a"); print((readHeap(v) + 5))
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
new(v, 20)
print(readHeap(v)); writeHeap(v, "a"); print((readHeap(v) + 5))
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 1
Execution stack:
print(readHeap(v)); writeHeap(v, "a"); print((readHeap(v) + 5))
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
print(readHeap(v))
writeHeap(v, "a"); print((readHeap(v) + 5))
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
writeHeap(v, "a"); print((readHeap(v) + 5))
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
writeHeap(v, "a")
print((readHeap(v) + 5))
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
Filetable:
Heap:
1(IntegerType):-> 20


Id: 1
Execution stack:
print((readHeap(v) + 5))
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
Filetable:
Heap:
1(StringType):-> "a"


Id: 2
Execution stack:
NOP
SymTable:
Output:
Filetable:
Heap:


Id: 2
Execution stack:
NOP
SymTable:
Output:
Filetable:
Heap:


Id: 2
Execution stack:
SymTable:
Output:
Filetable:
Heap:


Id: 3
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); print(readHeap(v)); print((readHeap(readHeap(a)) + 5))
SymTable:
Output:
Filetable:
Heap:


Id: 3
Execution stack:
RefType IntegerType v
new(v, 20); RefType RefType IntegerType a; new(a, v); print(readHeap(v)); print((readHeap(readHeap(a)) + 5))
SymTable:
Output:
Filetable:
Heap:


Id: 3
Execution stack:
new(v, 20); RefType RefType IntegerType a; new(a, v); print(readHeap(v)); print((readHeap(readHeap(a)) + 5))
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 3
Execution stack:
new(v, 20)
RefType RefType IntegerType a; new(a, v); print(readHeap(v)); print((readHeap(readHeap(a)) + 5))
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 3
Execution stack:
RefType RefType IntegerType a; new(a, v); print(readHeap(v)); print((readHeap(readHeap(a)) + 5))
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 3
Execution stack:
RefType RefType IntegerType a
new(a, v); print(readHeap(v)); print((readHeap(readHeap(a)) + 5))
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 3
Execution stack:
new(a, v); print(readHeap(v)); print((readHeap(readHeap(a)) + 5))
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 3
Execution stack:
new(a, v)
print(readHeap(v)); print((readHeap(readHeap(a)) + 5))
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 3
Execution stack:
print(readHeap(v)); print((readHeap(readHeap(a)) + 5))
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 3
Execution stack:
print(readHeap(v))
print((readHeap(readHeap(a)) + 5))
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 3
Execution stack:
print((readHeap(readHeap(a)) + 5))
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 3
Execution stack:
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
20
25
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 4
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 4
Execution stack:
RefType IntegerType v
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
Output:
Filetable:
Heap:


Id: 4
Execution stack:
new(v, 20); RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 4
Execution stack:
new(v, 20)
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 4
Execution stack:
RefType RefType IntegerType a; new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 4
Execution stack:
RefType RefType IntegerType a
new(a, v); print(v); print(a)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 4
Execution stack:
new(a, v); print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 4
Execution stack:
new(a, v)
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 4
Execution stack:
print(v); print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 4
Execution stack:
print(v)
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 4
Execution stack:
print(a)
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 4
Execution stack:
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Ref(1,IntegerType)
Ref(2,RefType IntegerType)
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 5
Execution stack:
RefType IntegerType v; new(v, 20); RefType RefType IntegerType a; new(a, v); new(v, 30); print(readHeap(readHeap(a)))
SymTable:
Output:
Filetable:
Heap:


Id: 5
Execution stack:
RefType IntegerType v
new(v, 20); RefType RefType IntegerType a; new(a, v); new(v, 30); print(readHeap(readHeap(a)))
SymTable:
Output:
Filetable:
Heap:


Id: 5
Execution stack:
new(v, 20); RefType RefType IntegerType a; new(a, v); new(v, 30); print(readHeap(readHeap(a)))
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 5
Execution stack:
new(v, 20)
RefType RefType IntegerType a; new(a, v); new(v, 30); print(readHeap(readHeap(a)))
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 5
Execution stack:
RefType RefType IntegerType a; new(a, v); new(v, 30); print(readHeap(readHeap(a)))
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 5
Execution stack:
RefType RefType IntegerType a
new(a, v); new(v, 30); print(readHeap(readHeap(a)))
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 5
Execution stack:
new(a, v); new(v, 30); print(readHeap(readHeap(a)))
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 5
Execution stack:
new(a, v)
new(v, 30); print(readHeap(readHeap(a)))
SymTable:
a(RefType RefType IntegerType):-> Ref(0,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 5
Execution stack:
new(v, 30); print(readHeap(readHeap(a)))
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 5
Execution stack:
new(v, 30)
print(readHeap(readHeap(a)))
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)


Id: 5
Execution stack:
print(readHeap(readHeap(a)))
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(3,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)
3(IntegerType):-> 30


Id: 5
Execution stack:
SymTable:
a(RefType RefType IntegerType):-> Ref(2,RefType IntegerType)
v(RefType IntegerType):-> Ref(3,IntegerType)
Output:
20
Filetable:
Heap:
1(IntegerType):-> 20
2(RefType IntegerType):-> Ref(1,IntegerType)
3(IntegerType):-> 30


Id: 6
Execution stack:
IntegerType v; v = 4; While((v > 0)){print(v); v = (v - 1)};; print(v)
SymTable:
Output:
Filetable:
Heap:


Id: 6
Execution stack:
IntegerType v
v = 4; While((v > 0)){print(v); v = (v - 1)};; print(v)
SymTable:
Output:
Filetable:
Heap:


Id: 6
Execution stack:
v = 4; While((v > 0)){print(v); v = (v - 1)};; print(v)
SymTable:
v(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 6
Execution stack:
v = 4
While((v > 0)){print(v); v = (v - 1)};; print(v)
SymTable:
v(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 6
Execution stack:
While((v > 0)){print(v); v = (v - 1)};; print(v)
SymTable:
v(IntegerType):-> 4
Output:
Filetable:
Heap:


Id: 6
Execution stack:
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 4
Output:
Filetable:
Heap:


Id: 6
Execution stack:
print(v); v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 4
Output:
Filetable:
Heap:


Id: 6
Execution stack:
print(v)
v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 4
Output:
Filetable:
Heap:


Id: 6
Execution stack:
v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 4
Output:
4
Filetable:
Heap:


Id: 6
Execution stack:
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 3
Output:
4
Filetable:
Heap:


Id: 6
Execution stack:
print(v); v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 3
Output:
4
Filetable:
Heap:


Id: 6
Execution stack:
print(v)
v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 3
Output:
4
Filetable:
Heap:


Id: 6
Execution stack:
v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 3
Output:
4
3
Filetable:
Heap:


Id: 6
Execution stack:
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 2
Output:
4
3
Filetable:
Heap:


Id: 6
Execution stack:
print(v); v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 2
Output:
4
3
Filetable:
Heap:


Id: 6
Execution stack:
print(v)
v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 2
Output:
4
3
Filetable:
Heap:


Id: 6
Execution stack:
v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 2
Output:
4
3
2
Filetable:
Heap:


Id: 6
Execution stack:
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 1
Output:
4
3
2
Filetable:
Heap:


Id: 6
Execution stack:
print(v); v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 1
Output:
4
3
2
Filetable:
Heap:


Id: 6
Execution stack:
print(v)
v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 1
Output:
4
3
2
Filetable:
Heap:


Id: 6
Execution stack:
v = (v - 1)
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 1
Output:
4
3
2
1
Filetable:
Heap:


Id: 6
Execution stack:
While((v > 0)){print(v); v = (v - 1)};
print(v)
SymTable:
v(IntegerType):-> 0
Output:
4
3
2
1
Filetable:
Heap:


Id: 6
Execution stack:
print(v)
SymTable:
v(IntegerType):-> 0
Output:
4
3
2
1
Filetable:
Heap:


Id: 6
Execution stack:
SymTable:
v(IntegerType):-> 0
Output:
4
3
2
1
0
Filetable:
Heap:


Id: 7
Execution stack:
RefType IntegerType v; new(v, 20); new(v, 30)
SymTable:
Output:
Filetable:
Heap:


Id: 7
Execution stack:
RefType IntegerType v
new(v, 20); new(v, 30)
SymTable:
Output:
Filetable:
Heap:


Id: 7
Execution stack:
new(v, 20); new(v, 30)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 7
Execution stack:
new(v, 20)
new(v, 30)
SymTable:
v(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 7
Execution stack:
new(v, 30)
SymTable:
v(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20


Id: 7
Execution stack:
SymTable:
v(RefType IntegerType):-> Ref(2,IntegerType)
Output:
Filetable:
Heap:
2(IntegerType):-> 30


Id: 8
Execution stack:
IntegerType v; RefType IntegerType a; v = 10; new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
Output:
Filetable:
Heap:


Id: 8
Execution stack:
IntegerType v
RefType IntegerType a; v = 10; new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
Output:
Filetable:
Heap:


Id: 8
Execution stack:
RefType IntegerType a; v = 10; new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
v(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 8
Execution stack:
RefType IntegerType a
v = 10; new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
v(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 8
Execution stack:
v = 10; new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
v(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 8
Execution stack:
v = 10
new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
v(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 8
Execution stack:
new(a, 22); fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:


Id: 8
Execution stack:
new(a, 22)
fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:


Id: 8
Execution stack:
fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a))); print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:
1(IntegerType):-> 22


Id: 8
Execution stack:
fork(writeHeap(a, 30); v = 32; print(v); print(readHeap(a)))
print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:
1(IntegerType):-> 22


Id: 8
Execution stack:
print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:
1(IntegerType):-> 22


Id: 9
Execution stack:
writeHeap(a, 30); v = 32; print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:
1(IntegerType):-> 22


Id: 8
Execution stack:
print(v)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:
1(IntegerType):-> 22


Id: 9
Execution stack:
writeHeap(a, 30)
v = 32; print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
Filetable:
Heap:
1(IntegerType):-> 22


Id: 8
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
10
Filetable:
Heap:
1(IntegerType):-> 30


Id: 9
Execution stack:
v = 32; print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
10
Filetable:
Heap:
1(IntegerType):-> 30


Id: 8
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
10
30
Filetable:
Heap:
1(IntegerType):-> 30


Id: 9
Execution stack:
v = 32
print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 10
Output:
10
30
Filetable:
Heap:
1(IntegerType):-> 30


Id: 9
Execution stack:
print(v); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 32
Output:
10
30
Filetable:
Heap:
1(IntegerType):-> 30


Id: 9
Execution stack:
print(v)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 32
Output:
10
30
Filetable:
Heap:
1(IntegerType):-> 30


Id: 9
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 32
Output:
10
30
32
Filetable:
Heap:
1(IntegerType):-> 30


Id: 9
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 32
Output:
10
30
32
30
Filetable:
Heap:
1(IntegerType):-> 30


Id: 10
Execution stack:
RefType IntegerType a; IntegerType count; While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
Output:
Filetable:
Heap:


Id: 10
Execution stack:
RefType IntegerType a
IntegerType count; While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
Output:
Filetable:
Heap:


Id: 10
Execution stack:
IntegerType count; While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 10
Execution stack:
IntegerType count
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:


Id: 10
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 10
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 11
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 10
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
Filetable:
Heap:


Id: 11
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 12
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
Filetable:
Heap:


Id: 12
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
Filetable:
Heap:
1(IntegerType):-> 0


Id: 12
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
count(IntegerType):-> 0
Output:
Filetable:
Heap:
1(IntegerType):-> 0


Id: 10
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:
1(IntegerType):-> 0


Id: 12
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(1,IntegerType)
count(IntegerType):-> 0
Output:
0
Filetable:
Heap:
1(IntegerType):-> 0


Id: 13
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:
1(IntegerType):-> 0


Id: 10
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
Filetable:
Heap:


Id: 13
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:


Id: 14
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
Filetable:
Heap:


Id: 14
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
Filetable:
Heap:
2(IntegerType):-> 1


Id: 14
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(2,IntegerType)
count(IntegerType):-> 1
Output:
0
Filetable:
Heap:
2(IntegerType):-> 1


Id: 10
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:
2(IntegerType):-> 1


Id: 14
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(2,IntegerType)
count(IntegerType):-> 1
Output:
0
1
Filetable:
Heap:
2(IntegerType):-> 1


Id: 15
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:
2(IntegerType):-> 1


Id: 10
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
Filetable:
Heap:


Id: 15
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:


Id: 16
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
Filetable:
Heap:


Id: 16
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
Filetable:
Heap:
3(IntegerType):-> 2


Id: 16
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(3,IntegerType)
count(IntegerType):-> 2
Output:
0
1
Filetable:
Heap:
3(IntegerType):-> 2


Id: 10
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:
3(IntegerType):-> 2


Id: 16
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(3,IntegerType)
count(IntegerType):-> 2
Output:
0
1
2
Filetable:
Heap:
3(IntegerType):-> 2


Id: 17
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:
3(IntegerType):-> 2


Id: 10
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
Filetable:
Heap:


Id: 17
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:


Id: 18
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
Filetable:
Heap:


Id: 18
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
Filetable:
Heap:
4(IntegerType):-> 3


Id: 18
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(4,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
Filetable:
Heap:
4(IntegerType):-> 3


Id: 10
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:
4(IntegerType):-> 3


Id: 18
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(4,IntegerType)
count(IntegerType):-> 3
Output:
0
1
2
3
Filetable:
Heap:
4(IntegerType):-> 3


Id: 19
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:
4(IntegerType):-> 3


Id: 10
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
Filetable:
Heap:


Id: 19
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:


Id: 20
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
Filetable:
Heap:


Id: 20
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
Filetable:
Heap:
5(IntegerType):-> 4


Id: 20
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(5,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
Filetable:
Heap:
5(IntegerType):-> 4


Id: 10
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:
5(IntegerType):-> 4


Id: 20
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(5,IntegerType)
count(IntegerType):-> 4
Output:
0
1
2
3
4
Filetable:
Heap:
5(IntegerType):-> 4


Id: 21
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:
5(IntegerType):-> 4


Id: 10
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 21
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 22
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 22
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
Filetable:
Heap:
6(IntegerType):-> 5


Id: 22
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(6,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
Filetable:
Heap:
6(IntegerType):-> 5


Id: 10
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:
6(IntegerType):-> 5


Id: 22
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(6,IntegerType)
count(IntegerType):-> 5
Output:
0
1
2
3
4
5
Filetable:
Heap:
6(IntegerType):-> 5


Id: 23
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:
6(IntegerType):-> 5


Id: 10
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 23
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 24
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 24
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
Filetable:
Heap:
7(IntegerType):-> 6


Id: 24
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(7,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
Filetable:
Heap:
7(IntegerType):-> 6


Id: 10
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
7(IntegerType):-> 6


Id: 24
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(7,IntegerType)
count(IntegerType):-> 6
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
7(IntegerType):-> 6


Id: 25
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
7(IntegerType):-> 6


Id: 10
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 25
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 26
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 26
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
8(IntegerType):-> 7


Id: 26
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(8,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
Filetable:
Heap:
8(IntegerType):-> 7


Id: 10
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
8(IntegerType):-> 7


Id: 26
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(8,IntegerType)
count(IntegerType):-> 7
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
8(IntegerType):-> 7


Id: 27
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
8(IntegerType):-> 7


Id: 10
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 27
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 28
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 28
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:


Id: 10
Execution stack:
fork(fork(new(a, count); print(readHeap(a))))
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
9(IntegerType):-> 8


Id: 28
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(9,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
Filetable:
Heap:
9(IntegerType):-> 8


Id: 10
Execution stack:
count = (count + 1)
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:
9(IntegerType):-> 8


Id: 28
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(9,IntegerType)
count(IntegerType):-> 8
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:
9(IntegerType):-> 8


Id: 29
Execution stack:
fork(new(a, count); print(readHeap(a)))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:
9(IntegerType):-> 8


Id: 10
Execution stack:
While((count < 10)){fork(fork(new(a, count); print(readHeap(a)))); count = (count + 1)};
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 10
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 29
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 30
Execution stack:
new(a, count); print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 10
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 10
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 30
Execution stack:
new(a, count)
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(0,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:


Id: 30
Execution stack:
print(readHeap(a))
SymTable:
a(RefType IntegerType):-> Ref(10,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
Filetable:
Heap:
10(IntegerType):-> 9


Id: 30
Execution stack:
SymTable:
a(RefType IntegerType):-> Ref(10,IntegerType)
count(IntegerType):-> 9
Output:
0
1
2
3
4
5
6
7
8
9
Filetable:
Heap:
10(IntegerType):-> 9


